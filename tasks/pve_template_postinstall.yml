---
### LXC POST INSTALL TASKS TO FINISH ANY REMAINING CONFIGURATION AND CREATE THE NEW LXC TEMPLATE
- name: pve_template_lxc_postinstall |  Stop temporary LXC instance
  community.general.proxmox:
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token_secret }}"
    api_host: "{{ proxmox_api_host }}"
    node: "{{ proxmox_pve_node }}"
    hostname: "{{ proxmox_temporary_vm_name }}"
    vmid: "{{ proxmox_temporary_vm_vmid }}"
    state: stopped
    force: true
  register: temporary_vm_stop
  retries: 0
  timeout: 80
  until: temporary_vm_stop is not failed
  when:
    - proxmox_temporary_vm_vmid is defined
    - proxmox_template_type == "lxc"

- name: pve_template_lxc_postinstall |  Run Assertion
  ansible.builtin.import_tasks: pve_handlers.yml
  vars:
    assertion_task: "{{ temporary_vm_stop }}"
  when:
    - proxmox_temporary_vm_vmid is defined
    - proxmox_template_type == "lxc"

- name: pve_template_lxc_postinstall |  Wait for any background processes to complete
  ansible.builtin.wait_for:
    timeout: 15

- name: pve_template_lxc_postinstall |  Update Hostname, Set DHCP, Add to Pool and Add Tags
  community.general.proxmox:
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token_secret }}"
    api_host: "{{ proxmox_api_host }}"
    node: "{{ proxmox_pve_node }}"
    password: "{{ proxmox_ci_password }}"
    hostname: "{{ proxmox_template_name }}"
    vmid: "{{ proxmox_temporary_vm_vmid }}"
    update: true
    netif:
      net0: name=eth0,ip=dhcp,bridge=vmbr0,mtu=9000,firewall=1
    pool: Templates
    tags:
      - lxc
      - telegraf
      - "{{ proxmox_template_name | replace('-lxc-template', '') }}"
  register: temporary_vm_update
  retries: 0
  timeout: 60
  until: temporary_vm_update is not failed
  when:
    - proxmox_temporary_vm_vmid is defined
    - proxmox_template_type == "lxc"

- name: pve_template_lxc_postinstall |  Run Assertion
  ansible.builtin.import_tasks: pve_handlers.yml
  vars:
    assertion_task: "{{ temporary_vm_update }}"
  when:
    - proxmox_temporary_vm_vmid is defined
    - proxmox_template_type == "lxc"

- name: pve_template_lxc_postinstall |  Wait for any background processes to complete
  ansible.builtin.wait_for:
    timeout: 15

- name: pve_template_lxc_postinstall |  Create LXC template
  community.general.proxmox:
    api_user: "{{ proxmox_api_user }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token_secret }}"
    api_host: "{{ proxmox_api_host }}"
    node: "{{ proxmox_pve_node }}"
    state: template
    force: true
    hostname: "{{ proxmox_template_name }}"
    vmid: "{{ proxmox_temporary_vm_vmid }}"
  register: template_conversion
  until: template_conversion is not failed
  timeout: 300
  when:
    - proxmox_temporary_vm_vmid is defined
    - proxmox_template_type == "lxc"

- name: pve_template_lxc_postinstall |  Run Assertion
  ansible.builtin.import_tasks: pve_handlers.yml
  vars:
    assertion_task: "{{ template_conversion }}"
  when:
    - proxmox_temporary_vm_vmid is defined
    - proxmox_template_type == "lxc"

- name: pve_template_lxc_postinstall |  Pausing to confirm template creation from temporary VM
  ansible.builtin.pause:
    prompt: |
      CAUTION: The following step will remove the SOURCE TEMPLATE with VMID: {{ proxmox_current_template_vmid }}!!
      Please verify the creation/configuration of NEW TEMPLATE {{ proxmox_template_name }} with VMID: {{ proxmox_temporary_vm_vmid }}
      Press [ENTER/RETURN] to REMOVE THE SOURCE TEMPLATE if you are satisfied.
  when:
    - proxmox_temporary_vm_vmid is defined
    - proxmox_template_type == "lxc"
    - proxmox_current_template_vmid is defined

- name: pve_template_lxc_postinstall |  Removing old template
  community.general.proxmox:
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token_secret }}"
    api_host: "{{ proxmox_api_host }}"
    node: "{{ proxmox_pve_node }}"
    vmid: "{{ proxmox_current_template_vmid }}"
    state: absent
    timeout: 300
  when:
    - proxmox_template_type == "lxc"
    - proxmox_current_template_vmid is defined
  register: template_destroy
  until: template_destroy is not failed
  timeout: 300

- name: pve_template_lxc_postinstall |  Run Assertion
  ansible.builtin.import_tasks: pve_handlers.yml
  vars:
    assertion_task: "{{ template_destroy }}"
  when:
    - proxmox_template_type == "lxc"
    - proxmox_current_template_vmid is defined

### QEMU POST-INSTALL TASKS TO FINISH ANY CONFIGURATION AND CREATE NEW QEMU TEMPLATE
- name: pve_template_qemu_postinstall |  Stop temporary QEMU instance
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token_secret }}"
    api_host: "{{ proxmox_api_host }}"
    node: "{{ proxmox_pve_node }}"
    name: "{{ proxmox_temporary_vm_name }}"
    vmid: "{{ proxmox_temporary_vm_vmid }}"
    state: stopped
    force: true
  register: temporary_vm_stop
  retries: 0
  timeout: 80
  until: temporary_vm_stop is not failed
  when:
    - proxmox_template_type == "qemu"
    - proxmox_temporary_vm_vmid is defined

- name: pve_template_qemu_postinstall |  Run Assertion
  ansible.builtin.import_tasks: pve_handlers.yml
  vars:
    assertion_task: "{{ temporary_vm_stop }}"
  when:
    - proxmox_template_type == "qemu"
    - proxmox_temporary_vm_vmid is defined

- name: pve_template_qemu_postinstall |  Wait for any background processes to complete
  ansible.builtin.wait_for:
    timeout: 15

- name: pve_template_qemu_postinstall |  Update Hostname, Set DHCP, Add to Pool and Add Tags for
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token_secret }}"
    api_host: "{{ proxmox_api_host }}"
    node: "{{ proxmox_pve_node }}"
    name: "{{ proxmox_template_name }}"
    vmid: "{{ proxmox_temporary_vm_vmid }}"
    pool: Templates
    ipconfig:
      ipconfig0: ip=dhcp
    net:
      net0: virtio,bridge=vmbr0,mtu=9000,queues=4,firewall=1
    update: true
    tags:
      - kvm
      - telegraf
      - "{{ proxmox_template_name | replace('-template', '') }}"
  register: temporary_vm_update
  retries: 0
  timeout: 60
  until: temporary_vm_update is not failed
  when:
    - proxmox_template_type == "qemu"
    - proxmox_temporary_vm_vmid is defined
- name: pve_template_qemu_postinstall |  Run Assertion
  ansible.builtin.import_tasks: pve_handlers.yml
  vars:
    assertion_task: "{{ temporary_vm_update }}"
  when:
    - proxmox_template_type == "qemu"
    - proxmox_temporary_vm_vmid is defined

- name: pve_template_qemu_postinstall |  Wait for any background processes to complete
  ansible.builtin.wait_for:
    timeout: 15

- name: pve_template_qemu_postinstall |  Create QEMU template from ID
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token_secret }}"
    api_host: "{{ proxmox_api_host }}"
    name: "{{ proxmox_template_name }}"
    vmid: "{{ proxmox_temporary_vm_vmid }}"
    node: "{{ proxmox_pve_node }}"
    template: true
    state: template
  register: template_conversion
  until: template_conversion is not failed
  timeout: 300
  when:
    - proxmox_template_type == "qemu"
    - proxmox_temporary_vm_vmid is defined

- name: pve_template_qemu_postinstall |  Run Assertion
  ansible.builtin.import_tasks: pve_handlers.yml
  vars:
    assertion_task: "{{ template_conversion }}"
  when:
    - proxmox_template_type == "qemu"
    - proxmox_temporary_vm_vmid is defined
    - proxmox_current_template_vmid is defined
- name: pve_template_qemu_postinstall |  Pausing to confirm template creation from temporary VM
  ansible.builtin.pause:
    prompt: |
      CAUTION: The following step will remove the SOURCE TEMPLATE with VMID: {{ proxmox_current_template_vmid }}!!
      Please verify the creation/configuration of NEW TEMPLATE {{ proxmox_template_name }} with VMID: {{ proxmox_temporary_vm_vmid }}
      Press [ENTER/RETURN] to REMOVE THE SOURCE TEMPLATE if you are satisfied.
  when:
    - proxmox_temporary_vm_vmid is defined
    - proxmox_current_template_vmid is defined

- name: pve_template_qemu_postinstall |  Removing old template
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token_secret }}"
    api_host: "{{ proxmox_api_host }}"
    node: "{{ proxmox_pve_node }}"
    vmid: "{{ proxmox_current_template_vmid }}"
    template: true
    state: absent
    timeout: 300
  when:
    - proxmox_current_template_vmid is defined
    - proxmox_template_type == "qemu"
  register: template_destroy
  until: template_destroy is not failed
  timeout: 300

- name: pve_template_qemu_postinstall |  Run Assertion
  ansible.builtin.import_tasks: pve_handlers.yml
  vars:
    assertion_task: "{{ template_destroy }}"
  when:
    - proxmox_current_template_vmid is defined
    - proxmox_template_type == "qemu"
